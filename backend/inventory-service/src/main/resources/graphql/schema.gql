type Query {
    products: [ApiProduct!]
    productById(id: ID!): ApiProduct
    productByPluCode(pluCode: Int!): ApiProduct
    productByBarCode(barCode: Long!): ApiProduct
}

type Mutation {
    createProduct(product: ApiProductInput!): ApiProduct
}

interface ApiProduct {
    id: ID!
    name: String!
    pluCode: Int
    barCode: Long
    description: String
    stock: Int
    price: Float
}

type ApiSimpleProduct implements ApiProduct {
    id: ID!
    name: String!
    pluCode: Int
    barCode: Long
    description: String
    stock: Int
    price: Float
}

type ApiCompositeProduct implements ApiProduct {
    id: ID!
    name: String!
    pluCode: Int
    barCode: Long
    description: String
    stock: Int
    price: Float
    subProducts: [ApiProduct!]
}

input ApiProductInput {
    name: String! @Trim @Size(max: 30)
    pluCode: Int @NonNegative
    barCode: Long @NonNegative
    description: String @Trim
    price: Float @NonNegative
}

scalar Long
